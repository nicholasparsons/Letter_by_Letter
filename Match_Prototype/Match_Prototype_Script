!git clone https://github.com/nicholasparsons/Letter_by_Letter/

import os
os.chdir("Letter_by_Letter")

!pip install -r /content/Letter_by_Letter/Match_Prototype/requirements.txt

#Imports
import pandas as pd

#Pull data from Google Sheets
from google.colab import auth
auth.authenticate_user()

import gspread
from google.auth import default
creds, _ = default()

gc = gspread.authorize(creds)

worksheet = gc.open('Letter by Letter Match Sheet').sheet1

# get_all_records gives a list of rows with top row frozen.
rows = worksheet.get_all_records()

# Convert to a DataFrame and render as "df"
df = pd.DataFrame.from_records(rows)

#Remove blank entries.
df = df.drop(df[df['Native_Language']=='null'].index)

#Use df.index[-1] to find the final index of a dataframe.
df["Match_Score"] = 0.0

i = 0
for index, row in df.iterrows():
  if row["Target_Language"] != df.at[df.index[-1],"Native_Language"] or row["Native_Language"] != df.at[df.index[-1],"Target_Language"]:
    i=i+1
    continue
  elif row["Available_Matches"] == 0:
    i = i+1
    continue
  else:
    df.at[i,"Match_Score"] = df.at[i,"Match_Score"] + 1
    language_level_score = ((abs(df.at[df.index[-1],"Language_Level"] - df.at[i,"Language_Level"])**2)*(-1/16))+1
    df.at[i,"Match_Score"] = df.at[i,"Match_Score"] + language_level_score
    if df.at[df.index[-1],"Age"] != 0 and df.at[i,"Age"] != 0:
      age_score = ((abs(df.at[df.index[-1],"Age"] - df.at[i,"Age"])**2)*(-1/64))+1
      df.at[i,"Match_Score"] = df.at[i,"Match_Score"] + age_score
    if df.at[df.index[-1],"Gender"] != "" and df.at[df.index[-1],"Gender"] == df.at[i,"Gender"]:
      df.at[i,"Match_Score"] = df.at[i,"Match_Score"] + 1
    if df.at[df.index[-1],"Study_Method"] != "" and df.at[df.index[-1],"Study_Method"] == df.at[i,"Study_Method"]:
      df.at[i,"Match_Score"] = df.at[i,"Match_Score"] + 1
    if df.at[df.index[-1],"Interests"] != "":
      Respondent_Interests = df.at[df.index[-1],"Interests"].split(", ")
      Target_Interests = df.at[i,"Interests"].split(", ")
      interest_score = 0
      for j in Respondent_Interests:
        for k in Target_Interests:
          if j == k:
            interest_score = interest_score + 1
      interest_score = ((1/len(Respondent_Interests))**2)*(interest_score**2)
      df.at[i,"Match_Score"] = df.at[i,"Match_Score"] + interest_score
    i=i+1

df["Match"] = "No"
for c in range(df.at[df.index[-1],"Available_Matches"]):
  max = 0
  max_index = 0
  for index in df["Match_Score"].index:
    if df["Match_Score"][index] > max and df["Match"][index] != "Yes":
      max = df["Match_Score"][index]
      max_index = index
  df.loc[max_index,"Match"] = "Yes"
  df.loc[max_index,"Available_Matches"] = df.loc[max_index,"Available_Matches"]-1

df_match = df[df.Match == "Yes"].copy().reset_index()
num_matches = df_match.shape[0]
print(f"You received {num_matches} matches.")
df_match.at[0,"First_Name"]
for x in range(num_matches):
  print(f"Match number {x+1}: " + df_match.at[x,"First_Name"]+" " + df_match.at[x,"Last_Name"] + f"\nMatch {x+1} Address: " + df_match.at[x,"Mailing_Address"])
